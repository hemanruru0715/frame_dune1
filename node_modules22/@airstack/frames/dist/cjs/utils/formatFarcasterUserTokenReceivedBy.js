"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatFarcasterUserTokenReceivedBy = void 0;
var types_1 = require("../types");
function formatFarcasterUserTokenReceivedBy(data) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var _o = data !== null && data !== void 0 ? data : {}, ethereum = _o.ethereum, base = _o.base, zora = _o.zora, gold = _o.gold, degen = _o.degen, ham = _o.ham;
    return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], ((_b = (_a = ethereum === null || ethereum === void 0 ? void 0 : ethereum.TokenTransfer) === null || _a === void 0 ? void 0 : _a.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, txHash: txHash, tokenType: tokenType, sender: sender }, nftData);
    })) !== null && _b !== void 0 ? _b : []), true), ((_d = (_c = base === null || base === void 0 ? void 0 : base.TokenTransfer) === null || _c === void 0 ? void 0 : _c.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, tokenType: tokenType, txHash: txHash, sender: sender }, nftData);
    })) !== null && _d !== void 0 ? _d : []), true), ((_f = (_e = zora === null || zora === void 0 ? void 0 : zora.TokenTransfer) === null || _e === void 0 ? void 0 : _e.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, tokenType: tokenType, txHash: txHash, sender: sender }, nftData);
    })) !== null && _f !== void 0 ? _f : []), true), ((_h = (_g = gold === null || gold === void 0 ? void 0 : gold.TokenTransfer) === null || _g === void 0 ? void 0 : _g.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, tokenType: tokenType, txHash: txHash, sender: sender }, nftData);
    })) !== null && _h !== void 0 ? _h : []), true), ((_k = (_j = degen === null || degen === void 0 ? void 0 : degen.TokenTransfer) === null || _j === void 0 ? void 0 : _j.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, tokenType: tokenType, txHash: txHash, sender: sender }, nftData);
    })) !== null && _k !== void 0 ? _k : []), true), ((_m = (_l = ham === null || ham === void 0 ? void 0 : ham.TokenTransfer) === null || _l === void 0 ? void 0 : _l.map(function (_a) {
        var blockchain = _a.blockchain, tokenAddress = _a.tokenAddress, amount = _a.amount, amountInWei = _a.amountInWei, token = _a.token, blockTimestamp = _a.blockTimestamp, blockNumber = _a.blockNumber, txHash = _a.txHash, sender = _a.sender, tokenNft = _a.tokenNft, tokenType = _a.tokenType, tokenId = _a.tokenId;
        var nftData = {};
        var _b = token !== null && token !== void 0 ? token : {}, name = _b.name, symbol = _b.symbol;
        var _c = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {}, contentValue = _c.contentValue, metaData = _c.metaData;
        var image = (contentValue !== null && contentValue !== void 0 ? contentValue : {}).image;
        if (tokenType !== types_1.TokenType.ERC20)
            nftData = __assign(__assign({}, nftData), { metaData: metaData, image: image, tokenId: tokenId });
        return __assign({ blockchain: blockchain, tokenAddress: tokenAddress, amount: amount, amountInWei: amountInWei, name: name, symbol: symbol, blockTimestamp: blockTimestamp, blockNumber: blockNumber, tokenType: tokenType, txHash: txHash, sender: sender }, nftData);
    })) !== null && _m !== void 0 ? _m : []), true);
}
exports.formatFarcasterUserTokenReceivedBy = formatFarcasterUserTokenReceivedBy;
//# sourceMappingURL=formatFarcasterUserTokenReceivedBy.js.map