"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchFarcasterChannels = void 0;
var node_1 = require("@airstack/node");
var searchFarcasterChannels_query_1 = require("../graphql/query/searchFarcasterChannels.query");
var iteratePagination_1 = require("../utils/iteratePagination");
var formatSearchFarcasterChannels_1 = require("../utils/formatSearchFarcasterChannels");
/**
 * @description Search Farcaster channels by name
 * @example
 * const { data, error } = await searchFarcasterChannels({
 *  channel: "air",
 *  createdAtTimestamp: {
 *    after: "2024-02-01T00:00:00Z",
 *    before: "2024-02-28T00:00:00Z",
 *  },
 *  limit: 100,
 * });
 * @param {Number} input.channel Keywords to search Farcaster channel by name
 * @param {Time} [input.createdAtTimestamp.before] get channels created before the specified input. ISO 8601 date string, e.g. "2024-02-28T00:00:00Z"
 * @param {Time} [input.createdAtTimestamp.after] get channels created after the specified input. ISO 8601 date string, e.g. "2024-02-28T00:00:00Z"
 * @param {Number} [input.limit=200] Number of JSON responses returned per API call. Maximum value is 200.
 * @returns Farcaster channels that have name matched the input keyword
 */
function searchFarcasterChannels(input) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var _c, channel, createdAtTimestamp, limit, _d, before, after, variable, _e, data, error, hasPrevPage, hasNextPage, getPrevPage, getNextPage;
        var _this = this;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _c = input !== null && input !== void 0 ? input : {}, channel = _c.channel, createdAtTimestamp = _c.createdAtTimestamp, limit = _c.limit;
                    _d = createdAtTimestamp !== null && createdAtTimestamp !== void 0 ? createdAtTimestamp : {}, before = _d.before, after = _d.after;
                    variable = {
                        channel: channel,
                        before: before !== null && before !== void 0 ? before : ((_b = (_a = new Date()) === null || _a === void 0 ? void 0 : _a.toISOString()) === null || _b === void 0 ? void 0 : _b.split(".")[0]) + "Z",
                        after: after,
                        limit: limit,
                    };
                    return [4 /*yield*/, (0, node_1.fetchQueryWithPagination)(searchFarcasterChannels_query_1.searchFarcasterChannelsQuery, variable)];
                case 1:
                    _e = _f.sent(), data = _e.data, error = _e.error, hasPrevPage = _e.hasPrevPage, hasNextPage = _e.hasNextPage, getPrevPage = _e.getPrevPage, getNextPage = _e.getNextPage;
                    return [2 /*return*/, {
                            data: error ? null : (0, formatSearchFarcasterChannels_1.formatSearchFarcasterChannels)(data),
                            error: error,
                            hasPrevPage: hasPrevPage,
                            hasNextPage: hasNextPage,
                            getPrevPage: function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, (0, iteratePagination_1.iteratePagination)(getPrevPage, formatSearchFarcasterChannels_1.formatSearchFarcasterChannels)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); },
                            getNextPage: function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, (0, iteratePagination_1.iteratePagination)(getNextPage, formatSearchFarcasterChannels_1.formatSearchFarcasterChannels)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); },
                        }];
            }
        });
    });
}
exports.searchFarcasterChannels = searchFarcasterChannels;
//# sourceMappingURL=searchFarcasterChannels.js.map