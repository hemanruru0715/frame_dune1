"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCastReactionsByFarcasterUser = void 0;
var node_1 = require("@airstack/node");
var checkCastReactionsByFarcasterUser_query_1 = require("../graphql/query/checkCastReactionsByFarcasterUser.query");
/**
 * @description Check If a Farcaster user of a given FID has reacted to a list of casts.
 * @example
 * const { data, error } = await checkCastReactionsByFarcasterUser({
 *  fid: 1,
 *  criteria: FarcasterReactionCriteria.Likes,
 *  castHashes: ["0x4c17ff12d9a925a0dec822a8cbf06f46c6268553"],
 * });
 * @param {Number} input.fid Farcaster user FID
 * @param {FarcasterReactionCriteria} input.criteria Either liked, replied, or recasted
 * @param {Array<String>} input.castHashes List of cast hashes to check if the user has reacted to any of the listed casts
 * @returns List of the cast hashes and return status of whether user has reacted to any of the listed casts, returned in `isReacted` field
 */
function checkCastReactionsByFarcasterUser(input) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var _c, fid, criteria, castHashes, variable, _d, data, error, Reaction;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _c = input !== null && input !== void 0 ? input : {}, fid = _c.fid, criteria = _c.criteria, castHashes = _c.castHashes;
                    variable = {
                        identity: "fc_fid:".concat(fid),
                        criteria: criteria,
                        castHashes: castHashes,
                    };
                    return [4 /*yield*/, (0, node_1.fetchQuery)(checkCastReactionsByFarcasterUser_query_1.checkCastReactionsByFarcasterUserQuery, variable)];
                case 1:
                    _d = _e.sent(), data = _d.data, error = _d.error;
                    Reaction = ((_a = data === null || data === void 0 ? void 0 : data.FarcasterReactions) !== null && _a !== void 0 ? _a : {}).Reaction;
                    return [2 /*return*/, {
                            data: error
                                ? null
                                : (_b = castHashes === null || castHashes === void 0 ? void 0 : castHashes.map(function (h) {
                                    var _a;
                                    return ({
                                        castHash: h,
                                        isReacted: (_a = (Reaction !== null && Reaction !== void 0 ? Reaction : [])) === null || _a === void 0 ? void 0 : _a.some(function (_a) {
                                            var cast = _a.cast;
                                            return (cast === null || cast === void 0 ? void 0 : cast.hash) === (h === null || h === void 0 ? void 0 : h.toLowerCase());
                                        }),
                                    });
                                })) !== null && _b !== void 0 ? _b : [],
                            error: error,
                        }];
            }
        });
    });
}
exports.checkCastReactionsByFarcasterUser = checkCastReactionsByFarcasterUser;
//# sourceMappingURL=checkCastReactionsByFarcasterUser.js.map