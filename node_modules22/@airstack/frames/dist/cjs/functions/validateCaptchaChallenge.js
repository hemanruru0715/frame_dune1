"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateCaptchaChallenge = void 0;
var constants_1 = require("../constants");
var types_1 = require("../types");
var sha256_1 = __importDefault(require("sha256"));
/**
 * @description Validate Captcha challenges that was generated for Farcaster Frames
 * @example
 * const { isValidated, image } = await validateCaptchaChallenge({ inputText, state });
 *
 * @param {String} input.inputText The input text to verify the captcha
 * @param {Object} input.state The state of the captcha challenge from `generateCaptchaChallenge`
 * @param {FrameRatio} [input.options.ratio=FrameRatio._1_91__1] The frames image ratio for the captcha
 * @param {Boolean} [input.options.includeImage=true] Whether to include the image in the response
 * @returns Show whether the captcha challenge is validated or not and the image
 */
function validateCaptchaChallenge(input) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var image, _c, inputText, state, options, _d, captchaId, valueHash, _e, includeImage, isValidated, res, e_1;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _f.trys.push([0, 4, , 5]);
                    image = void 0;
                    _c = input !== null && input !== void 0 ? input : {
                        options: {},
                    }, inputText = _c.inputText, state = _c.state, options = _c.options;
                    _d = state !== null && state !== void 0 ? state : {}, captchaId = _d.captchaId, valueHash = _d.valueHash;
                    _e = (options !== null && options !== void 0 ? options : {}).includeImage, includeImage = _e === void 0 ? true : _e;
                    isValidated = sha256_1.default.x2("".concat(captchaId, ",").concat(inputText)) === valueHash;
                    if (!includeImage) return [3 /*break*/, 3];
                    return [4 /*yield*/, fetch("".concat(constants_1.FRAMES_SDK_API, "/api/images/validate-captcha?isValidated=").concat(isValidated, "&ratio=").concat((_a = options === null || options === void 0 ? void 0 : options.ratio) !== null && _a !== void 0 ? _a : types_1.FrameRatio._1_91__1))];
                case 1:
                    res = _f.sent();
                    return [4 /*yield*/, res.json()];
                case 2:
                    image = (_b = (_f.sent())) === null || _b === void 0 ? void 0 : _b.image;
                    _f.label = 3;
                case 3: return [2 /*return*/, __assign(__assign({}, (includeImage ? { image: image } : {})), { isValidated: isValidated })];
                case 4:
                    e_1 = _f.sent();
                    throw new Error(JSON.stringify(e_1));
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.validateCaptchaChallenge = validateCaptchaChallenge;
//# sourceMappingURL=validateCaptchaChallenge.js.map