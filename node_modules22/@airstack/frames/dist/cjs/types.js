"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrendingSwapsCriteria = exports.TrendingSwapsBlockchain = exports.AllowListCriteriaEnum = exports.Features = exports.Button = exports.FrameRatio = exports.TransferType = exports.TokenType = exports.NFTType = exports.FarcasterReactionCriteria = exports.Criteria = exports.TimeFrame = exports.Audience = exports.FarcasterChannelActionType = exports.TrendingTokensCriteria = exports.TokenBlockchain = void 0;
var types_1 = require("./graphql/types");
Object.defineProperty(exports, "TokenBlockchain", { enumerable: true, get: function () { return types_1.TokenBlockchain; } });
Object.defineProperty(exports, "TrendingTokensCriteria", { enumerable: true, get: function () { return types_1.TrendingTokensCriteria; } });
Object.defineProperty(exports, "FarcasterChannelActionType", { enumerable: true, get: function () { return types_1.FarcasterChannelActionType; } });
Object.defineProperty(exports, "Audience", { enumerable: true, get: function () { return types_1.Audience; } });
Object.defineProperty(exports, "TimeFrame", { enumerable: true, get: function () { return types_1.TimeFrame; } });
Object.defineProperty(exports, "Criteria", { enumerable: true, get: function () { return types_1.TrendingMintsCriteria; } });
Object.defineProperty(exports, "FarcasterReactionCriteria", { enumerable: true, get: function () { return types_1.FarcasterReactionCriteria; } });
var NFTType;
(function (NFTType) {
    NFTType["ERC721"] = "ERC721";
    NFTType["ERC1155"] = "ERC1155";
})(NFTType || (exports.NFTType = NFTType = {}));
var TokenType;
(function (TokenType) {
    TokenType["ERC20"] = "ERC20";
    TokenType["ERC721"] = "ERC721";
    TokenType["ERC1155"] = "ERC1155";
})(TokenType || (exports.TokenType = TokenType = {}));
var TransferType;
(function (TransferType) {
    TransferType["All"] = "all";
    TransferType["SelfInitiated"] = "self_initiated";
})(TransferType || (exports.TransferType = TransferType = {}));
var FrameRatio;
(function (FrameRatio) {
    FrameRatio["_1__1"] = "1:1";
    FrameRatio["_1_91__1"] = "1.91:1";
})(FrameRatio || (exports.FrameRatio = FrameRatio = {}));
var Button = function () {
    return null;
};
exports.Button = Button;
var Features;
(function (Features) {
    /**
     * Fetches Farcaster user details, e.g. profile name, fid, number of followers/followings, etc.
     */
    Features["USER_DETAILS"] = "user_details";
    /**
     * Fetches Farcaster followings of a Farcaster user.
     */
    Features["FARCASTER_FOLLOWINGS"] = "farcaster_followings";
    /**
     * Fetches Farcaster followers of a Farcaster user.
     */
    Features["FARCASTER_FOLLOWERS"] = "farcaster_followers";
    /**
     * Fetches Farcaster channels of a Farcaster user.
     */
    Features["FARCASTER_CHANNELS"] = "farcaster_channels";
    /**
     * Fetches Farcaster casts of a Farcaster user.
     */
    Features["FARCASTER_CASTS"] = "farcaster_casts";
})(Features || (exports.Features = Features = {}));
var AllowListCriteriaEnum;
(function (AllowListCriteriaEnum) {
    /**
     * Check if the user has certain number of farcaster followers
     */
    AllowListCriteriaEnum["NUMBER_OF_FARCASTER_FOLLOWERS"] = "number_of_farcaster_followers";
    /**
     * Check if the user is followed by certain users on farcaster
     */
    AllowListCriteriaEnum["FARCASTER_FOLLOWED_BY"] = "farcaster_followed_by";
    /**
     * Check if the user is following certain users on farcaster
     */
    AllowListCriteriaEnum["FARCASTER_FOLLOWING"] = "farcaster_following";
    /**
     * Check if the user is following the caster
     */
    AllowListCriteriaEnum["FARCASTER_FOLLOWING_CASTER"] = "farcaster_following_caster";
})(AllowListCriteriaEnum || (exports.AllowListCriteriaEnum = AllowListCriteriaEnum = {}));
var TrendingSwapsBlockchain;
(function (TrendingSwapsBlockchain) {
    /**
     * Base chain (L2)
     */
    TrendingSwapsBlockchain["Base"] = "base";
    /**
     * Ethereum mainnet
     */
    TrendingSwapsBlockchain["Ethereum"] = "ethereum";
})(TrendingSwapsBlockchain || (exports.TrendingSwapsBlockchain = TrendingSwapsBlockchain = {}));
var TrendingSwapsCriteria;
(function (TrendingSwapsCriteria) {
    /**
     * Sort the trending swaps by the number of buy transactions.
     */
    TrendingSwapsCriteria["BuyTransactionCount"] = "buy_transaction_count";
    /**
     * Sort the trending swaps by the number of buying volume.
     */
    TrendingSwapsCriteria["BuyVolume"] = "buy_volume";
    /**
     * Sort the trending swaps by the number of sell transactions.
     */
    TrendingSwapsCriteria["SellTransactionCount"] = "sell_transaction_count";
    /**
     * Sort the trending swaps by the number of selling volume.
     */
    TrendingSwapsCriteria["SellVolume"] = "sell_volume";
    /**
     * Sort the trending swaps by the number of total buy & sell transactions.
     */
    TrendingSwapsCriteria["TotalTransactionCount"] = "total_transaction_count";
    /**
     * Sort the trending swaps by the number of total unique buyer & seller wallets swapping.
     */
    TrendingSwapsCriteria["TotalUniqueWallets"] = "total_unique_wallets";
    /**
     * Sort the trending swaps by the number of total buying & selling volume.
     */
    TrendingSwapsCriteria["TotalVolume"] = "total_volume";
    /**
     * Sort the trending swaps by the number of unique buyer wallets swapping.
     */
    TrendingSwapsCriteria["UniqueBuyWallets"] = "unique_buy_wallets";
    /**
     * Sort the trending swaps by the number of unique seller wallets swapping.
     */
    TrendingSwapsCriteria["UniqueSellWallets"] = "unique_sell_wallets";
})(TrendingSwapsCriteria || (exports.TrendingSwapsCriteria = TrendingSwapsCriteria = {}));
//# sourceMappingURL=types.js.map