"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.allowListFramesjsMiddleware = void 0;
var decodeFrameActionPayloadFromRequest_1 = require("../../utils/decodeFrameActionPayloadFromRequest");
var core_1 = require("@farcaster/core");
var config_1 = require("../../config");
var init_1 = require("../../init");
var evaluateAllowListCriteria_1 = require("../../utils/evaluateAllowListCriteria");
/**
 *
 * @param input
 * @returns
 */
var allowListFramesjsMiddleware = function (input) {
    var _a = input !== null && input !== void 0 ? input : {}, apiKey = _a.apiKey, criteria = _a.criteria;
    // If an apiKey is provided, initialize the SDK with custom API key
    if (apiKey && !(config_1.config === null || config_1.config === void 0 ? void 0 : config_1.config.authKey))
        (0, init_1.init)(apiKey);
    return function (ctx, next) { return __awaiter(void 0, void 0, void 0, function () {
        var payload, decodedMessage, _a, fid, frameActionBody, castId, isAllowed, error_1;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 3, , 4]);
                    // frame message is available only if the request is a POST request
                    if (ctx.request.method !== "POST") {
                        return [2 /*return*/, next()];
                    }
                    return [4 /*yield*/, (0, decodeFrameActionPayloadFromRequest_1.decodeFrameActionPayloadFromRequest)(ctx.request)];
                case 1:
                    payload = _c.sent();
                    if (!payload) {
                        return [2 /*return*/, next()];
                    }
                    decodedMessage = core_1.Message.decode(Buffer.from(payload.trustedData.messageBytes, "hex"));
                    _a = (_b = decodedMessage === null || decodedMessage === void 0 ? void 0 : decodedMessage.data) !== null && _b !== void 0 ? _b : {}, fid = _a.fid, frameActionBody = _a.frameActionBody;
                    castId = (frameActionBody !== null && frameActionBody !== void 0 ? frameActionBody : {}).castId;
                    return [4 /*yield*/, (0, evaluateAllowListCriteria_1.evaluateAllowListCriteria)(fid, criteria, {
                            castFid: castId === null || castId === void 0 ? void 0 : castId.fid,
                        })];
                case 2:
                    isAllowed = _c.sent();
                    return [2 /*return*/, next({ isAllowed: isAllowed })];
                case 3:
                    error_1 = _c.sent();
                    console.error(error_1);
                    throw new Error(JSON.stringify(error_1));
                case 4: return [2 /*return*/];
            }
        });
    }); };
};
exports.allowListFramesjsMiddleware = allowListFramesjsMiddleware;
//# sourceMappingURL=allowList.js.map