"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.farcasterDataFrogMiddleware = void 0;
var __1 = require("../..");
var config_1 = require("../../config");
var farcasterDataFrogMiddleware = function (parameters) {
    var _a = parameters !== null && parameters !== void 0 ? parameters : {}, apiKey = _a.apiKey, features = _a.features, _b = _a.env, env = _b === void 0 ? "prod" : _b;
    var _c = features !== null && features !== void 0 ? features : {}, userDetails = _c.userDetails, channels = _c.channels, followers = _c.followers, followings = _c.followings;
    // If an apiKey is provided, initialize the SDK with custom API key
    if (apiKey && !(config_1.config === null || config_1.config === void 0 ? void 0 : config_1.config.authKey))
        (0, __1.init)(apiKey);
    return function (c, next) { return __awaiter(void 0, void 0, void 0, function () {
        var fid, body, untrustedData, message, data, _a, userDetailsResponse, channelsResponse, followersResponse, followingsResponse;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, c.req.json().catch(function () { })];
                case 1:
                    body = (_b.sent()) || {};
                    if (!(env === "dev")) return [3 /*break*/, 2];
                    untrustedData = (body !== null && body !== void 0 ? body : {}).untrustedData;
                    fid = untrustedData === null || untrustedData === void 0 ? void 0 : untrustedData.fid;
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, (0, __1.validateFramesMessage)(body)];
                case 3:
                    message = (_b.sent()).message;
                    data = (message !== null && message !== void 0 ? message : {}).data;
                    fid = data === null || data === void 0 ? void 0 : data.fid;
                    _b.label = 4;
                case 4:
                    if (!fid) return [3 /*break*/, 6];
                    return [4 /*yield*/, Promise.all([
                            userDetails
                                ? (0, __1.getFarcasterUserDetails)(__assign({ fid: fid }, (userDetails !== null && userDetails !== void 0 ? userDetails : {})))
                                : Promise.resolve(undefined),
                            channels
                                ? (0, __1.getFarcasterChannelsByParticipant)(__assign({ fid: fid }, (channels !== null && channels !== void 0 ? channels : {})))
                                : Promise.resolve(undefined),
                            followers
                                ? (0, __1.getFarcasterFollowers)(__assign({ fid: fid }, (followers !== null && followers !== void 0 ? followers : {})))
                                : Promise.resolve(undefined),
                            followings
                                ? (0, __1.getFarcasterFollowings)(__assign({ fid: fid }, (followings !== null && followings !== void 0 ? followings : {})))
                                : Promise.resolve(undefined),
                        ])];
                case 5:
                    _a = _b.sent(), userDetailsResponse = _a[0], channelsResponse = _a[1], followersResponse = _a[2], followingsResponse = _a[3];
                    if (userDetailsResponse)
                        c.set("userDetails", userDetailsResponse.data);
                    if (channelsResponse)
                        c.set("channels", channelsResponse.data);
                    if (followersResponse)
                        c.set("followers", followersResponse.data);
                    if (followingsResponse)
                        c.set("followings", followingsResponse.data);
                    _b.label = 6;
                case 6: return [4 /*yield*/, next()];
                case 7:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    }); };
};
exports.farcasterDataFrogMiddleware = farcasterDataFrogMiddleware;
//# sourceMappingURL=farcasterData.js.map