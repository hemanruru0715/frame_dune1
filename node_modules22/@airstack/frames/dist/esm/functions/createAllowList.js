import { fetchQuery } from "@airstack/node";
import { createAllowListQuery as query } from "../graphql/query/createAllowList.query";
/**
 * @description Create an allow list for a Farcaster user based on the given criteria.
 * @example
 * const { isAllowed, error } = await createAllowList({
 *  numberOfFollowersOnFarcaster: 100,
 *  isFollowingOnFarcaster: [2602],
 * });
 *
 * @param {Number} input.fid FID of the user to check
 * @param {Object} input.allowListCriteria Criteria to check if the user is allowed
 * @param {Function} [input.isAllowedFunction] Custom function to determine if the user is allowed
 * @returns Boolean to determine if the user is allowed or not
 */
export async function createAllowList(input) {
    var _a, _b, _c, _d;
    const { fid, allowListCriteria, isAllowedFunction } = input !== null && input !== void 0 ? input : {};
    const { numberOfFollowersOnFarcaster, isFollowingOnFarcaster } = allowListCriteria;
    const variables = {
        fid: (_a = fid === null || fid === void 0 ? void 0 : fid.toString()) !== null && _a !== void 0 ? _a : "1",
        identity: `fc_fid:${fid}`,
        isFollowingOnFarcaster: isFollowingOnFarcaster === null || isFollowingOnFarcaster === void 0 ? void 0 : isFollowingOnFarcaster.map((id) => `fc_fid:${id}`),
        followerCountOnFarcaster: numberOfFollowersOnFarcaster !== null && numberOfFollowersOnFarcaster !== void 0 ? numberOfFollowersOnFarcaster : 0,
    };
    const { data, error } = await fetchQuery(query(allowListCriteria), variables);
    const { isFollowingOnFarcaster: Follower, numberOfFollowersOnFC } = (_b = data) !== null && _b !== void 0 ? _b : {};
    // Check if user is following the listed users on Farcaster
    const isFollowingUsersOnFarcaster = (_c = isFollowingOnFarcaster === null || isFollowingOnFarcaster === void 0 ? void 0 : isFollowingOnFarcaster.map((fid) => {
        var _a, _b, _c;
        return ({
            fid,
            isFollowing: (_c = ((_b = (_a = Follower === null || Follower === void 0 ? void 0 : Follower.socialFollowers) === null || _a === void 0 ? void 0 : _a.Follower) !== null && _b !== void 0 ? _b : [])) === null || _c === void 0 ? void 0 : _c.some((f) => {
                var _a, _b;
                return (_b = (_a = f === null || f === void 0 ? void 0 : f.followingAddress) === null || _a === void 0 ? void 0 : _a.farcaster) === null || _b === void 0 ? void 0 : _b.some((fc) => (fc === null || fc === void 0 ? void 0 : fc.fid) === fid.toString());
            }),
        });
    })) !== null && _c !== void 0 ? _c : [];
    // Check if user has more followers than the specified count on Farcaster
    const isFarcasterFollowerCountAbove = ((_d = numberOfFollowersOnFC === null || numberOfFollowersOnFC === void 0 ? void 0 : numberOfFollowersOnFC.Social) !== null && _d !== void 0 ? _d : []).length > 0;
    if (isAllowedFunction) {
        // If a custom isAllowedFunction is provided,
        // use it to determine if the user is allowed
        return {
            isAllowed: await isAllowedFunction({
                isFollowingUsersOnFarcaster,
                isFarcasterFollowerCountAbove,
            }),
        };
    }
    return {
        isAllowed: error
            ? null
            : // If no custom isAllowedFunction is provided,
                // use the default AND logic to determine if the user is allowed
                true &&
                    (isFollowingOnFarcaster
                        ? isFollowingUsersOnFarcaster === null || isFollowingUsersOnFarcaster === void 0 ? void 0 : isFollowingUsersOnFarcaster.every(({ isFollowing }) => isFollowing)
                        : true) &&
                    (numberOfFollowersOnFarcaster ? isFarcasterFollowerCountAbove : true),
        error,
    };
}
//# sourceMappingURL=createAllowList.js.map