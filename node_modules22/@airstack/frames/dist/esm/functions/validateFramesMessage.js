import fetch from "node-fetch";
import { config } from "../config";
import { hexStringToUint8Array } from "../utils/hexStringToUint8Array";
import { Message } from "@farcaster/core";
import { bytesFromBase64 } from "../utils/bytesFromBase64";
/**
 * @description validate frames signature packet with Farcaster Hub
 * @example
 * const res = await validateFramesMessage(body);
 *
 * @param input.body The Frames Signature Packet
 * @returns Whether the signed message is valid or not and the return the message
 */
export async function validateFramesMessage(body) {
    var _a, _b, _c;
    if (!body) {
        throw new Error("Tried to call validateFrameMessage with no frame action payload. You may be calling it incorrectly on the homeframe");
    }
    if (!config.authKey) {
        throw new Error("API Key is not provided.");
    }
    try {
        const validateMessageResponse = await fetch("https://hubs.airstack.xyz/v1/validateMessage", {
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
                "x-airstack-hubs": config.authKey,
            },
            body: hexStringToUint8Array(body.trustedData.messageBytes),
        });
        const { valid, message } = await validateMessageResponse.json();
        const formattedMessage = Message.fromJSON(message);
        if ((_c = (_b = (_a = formattedMessage.data) === null || _a === void 0 ? void 0 : _a.frameActionBody) === null || _b === void 0 ? void 0 : _b.castId) === null || _c === void 0 ? void 0 : _c.hash)
            formattedMessage.data.frameActionBody.castId.hash = bytesFromBase64(body.untrustedData.castId.hash);
        if (valid) {
            return {
                isValid: true,
                message: formattedMessage,
            };
        }
        else {
            return {
                isValid: false,
                message: undefined,
            };
        }
    }
    catch (e) {
        throw new Error(JSON.stringify(e));
    }
}
//# sourceMappingURL=validateFramesMessage.js.map