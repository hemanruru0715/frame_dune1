import { fetchQuery } from "@airstack/node";
import { farcasterChannelDetailsQuery as query } from "../graphql/query/farcasterChannelDetails.query";
/**
 * @description Fetch Farcaster channel details provided fid
 * @example
 * const { data, error } = await getFarcasterChannelDetails({
 *  channel: "airstack"
 * });
 * @param {Number} input.channel Farcaster channel ID, e.g. /airstack channel ID is "airstack"
 * @returns Farcaster channel details, including name, description, warpcast URL, image URL, etc.
 */
export async function getFarcasterChannelDetails(input) {
    var _a, _b, _c, _d, _e;
    const { channel } = input !== null && input !== void 0 ? input : {};
    const variable = {
        channel,
    };
    const { data, error } = await fetchQuery(query, variable);
    const channelDetailsRes = (_a = data === null || data === void 0 ? void 0 : data.FarcasterChannels) === null || _a === void 0 ? void 0 : _a.FarcasterChannel;
    return {
        data: error
            ? null
            : ((_b = (channelDetailsRes !== null && channelDetailsRes !== void 0 ? channelDetailsRes : [])) === null || _b === void 0 ? void 0 : _b.length) >= 0
                ? Object.assign(Object.assign({}, ((_c = channelDetailsRes === null || channelDetailsRes === void 0 ? void 0 : channelDetailsRes[0]) !== null && _c !== void 0 ? _c : {})), { hosts: ((_e = (_d = channelDetailsRes === null || channelDetailsRes === void 0 ? void 0 : channelDetailsRes[0]) === null || _d === void 0 ? void 0 : _d.hosts) !== null && _e !== void 0 ? _e : []).map((host) => {
                        var _a;
                        return (Object.assign(Object.assign({}, host), { profileImage: (_a = host === null || host === void 0 ? void 0 : host.profileImage) === null || _a === void 0 ? void 0 : _a.image }));
                    }), warpcastUrl: `https://warpcast.com/~/channel/${channel}` }) : {},
        error,
    };
}
//# sourceMappingURL=getFarcasterChannelDetails.js.map