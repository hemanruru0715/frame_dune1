import { fetchQuery } from "@airstack/node";
import { checkCastReactionsByFarcasterUserQuery as query } from "../graphql/query/checkCastReactionsByFarcasterUser.query";
/**
 * @description Check If a Farcaster user of a given FID has reacted to a list of casts.
 * @example
 * const { data, error } = await checkCastReactionsByFarcasterUser({
 *  fid: 1,
 *  criteria: FarcasterReactionCriteria.Likes,
 *  castHashes: ["0x4c17ff12d9a925a0dec822a8cbf06f46c6268553"],
 * });
 * @param {Number} input.fid Farcaster user FID
 * @param {FarcasterReactionCriteria} input.criteria Either liked, replied, or recasted
 * @param {Array<String>} input.castHashes List of cast hashes to check if the user has reacted to any of the listed casts
 * @returns List of the cast hashes and return status of whether user has reacted to any of the listed casts, returned in `isReacted` field
 */
export async function checkCastReactionsByFarcasterUser(input) {
    var _a, _b;
    const { fid, criteria, castHashes } = input !== null && input !== void 0 ? input : {};
    const variable = {
        identity: `fc_fid:${fid}`,
        criteria,
        castHashes,
    };
    const { data, error } = await fetchQuery(query, variable);
    const { Reaction } = (_a = data === null || data === void 0 ? void 0 : data.FarcasterReactions) !== null && _a !== void 0 ? _a : {};
    return {
        data: error
            ? null
            : (_b = castHashes === null || castHashes === void 0 ? void 0 : castHashes.map((h) => {
                var _a;
                return ({
                    castHash: h,
                    isReacted: (_a = (Reaction !== null && Reaction !== void 0 ? Reaction : [])) === null || _a === void 0 ? void 0 : _a.some(({ cast }) => (cast === null || cast === void 0 ? void 0 : cast.hash) === (h === null || h === void 0 ? void 0 : h.toLowerCase())),
                });
            })) !== null && _b !== void 0 ? _b : [],
        error,
    };
}
//# sourceMappingURL=checkCastReactionsByFarcasterUser.js.map