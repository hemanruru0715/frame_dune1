import { decodeFrameActionPayloadFromRequest } from "../../utils/decodeFrameActionPayloadFromRequest";
import { Message } from "@farcaster/core";
import { config } from "../../config";
import { init } from "../../init";
import { evaluateAllowListCriteria } from "../../utils/evaluateAllowListCriteria";
/**
 *
 * @param input
 * @returns
 */
export const allowListFramesjsMiddleware = (input) => {
    const { apiKey, criteria } = input !== null && input !== void 0 ? input : {};
    // If an apiKey is provided, initialize the SDK with custom API key
    if (apiKey && !(config === null || config === void 0 ? void 0 : config.authKey))
        init(apiKey);
    return async (ctx, next) => {
        var _a;
        try {
            // frame message is available only if the request is a POST request
            if (ctx.request.method !== "POST") {
                return next();
            }
            // body must be a JSON object
            const payload = await decodeFrameActionPayloadFromRequest(ctx.request);
            if (!payload) {
                return next();
            }
            const decodedMessage = Message.decode(Buffer.from(payload.trustedData.messageBytes, "hex"));
            const { fid, frameActionBody } = (_a = decodedMessage === null || decodedMessage === void 0 ? void 0 : decodedMessage.data) !== null && _a !== void 0 ? _a : {};
            const { castId } = frameActionBody !== null && frameActionBody !== void 0 ? frameActionBody : {};
            const isAllowed = await evaluateAllowListCriteria(fid, criteria, {
                castFid: castId === null || castId === void 0 ? void 0 : castId.fid,
            });
            return next({ isAllowed });
        }
        catch (error) {
            console.error(error);
            throw new Error(JSON.stringify(error));
        }
    };
};
//# sourceMappingURL=allowList.js.map