import { init, validateFramesMessage, getFarcasterUserDetails, getFarcasterChannelsByParticipant, getFarcasterFollowers, getFarcasterFollowings, } from "../..";
import { config } from "../../config";
export const farcasterDataFrogMiddleware = (parameters) => {
    const { apiKey, features, env = "prod" } = parameters !== null && parameters !== void 0 ? parameters : {};
    const { userDetails, channels, followers, followings } = features !== null && features !== void 0 ? features : {};
    // If an apiKey is provided, initialize the SDK with custom API key
    if (apiKey && !(config === null || config === void 0 ? void 0 : config.authKey))
        init(apiKey);
    return async (c, next) => {
        let fid;
        const body = (await c.req.json().catch(() => { })) || {};
        if (env === "dev") {
            const { untrustedData } = body !== null && body !== void 0 ? body : {};
            fid = untrustedData === null || untrustedData === void 0 ? void 0 : untrustedData.fid;
        }
        else {
            // In production, get fid from the validated message
            const { message } = await validateFramesMessage(body);
            const { data } = message !== null && message !== void 0 ? message : {};
            fid = data === null || data === void 0 ? void 0 : data.fid;
        }
        if (fid) {
            const [userDetailsResponse, channelsResponse, followersResponse, followingsResponse,] = await Promise.all([
                userDetails
                    ? getFarcasterUserDetails(Object.assign({ fid }, (userDetails !== null && userDetails !== void 0 ? userDetails : {})))
                    : Promise.resolve(undefined),
                channels
                    ? getFarcasterChannelsByParticipant(Object.assign({ fid }, (channels !== null && channels !== void 0 ? channels : {})))
                    : Promise.resolve(undefined),
                followers
                    ? getFarcasterFollowers(Object.assign({ fid }, (followers !== null && followers !== void 0 ? followers : {})))
                    : Promise.resolve(undefined),
                followings
                    ? getFarcasterFollowings(Object.assign({ fid }, (followings !== null && followings !== void 0 ? followings : {})))
                    : Promise.resolve(undefined),
            ]);
            if (userDetailsResponse)
                c.set("userDetails", userDetailsResponse.data);
            if (channelsResponse)
                c.set("channels", channelsResponse.data);
            if (followersResponse)
                c.set("followers", followersResponse.data);
            if (followingsResponse)
                c.set("followings", followingsResponse.data);
        }
        await next();
    };
};
//# sourceMappingURL=farcasterData.js.map