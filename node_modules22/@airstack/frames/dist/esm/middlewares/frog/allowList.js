import { createAllowList, validateFramesMessage, init } from "../../";
import { config } from "../../config";
export function allowListFrogMiddleware(parameters) {
    const { apiKey, env } = parameters !== null && parameters !== void 0 ? parameters : {};
    // If an apiKey is provided, initialize the SDK with custom API key
    if (apiKey && !(config === null || config === void 0 ? void 0 : config.authKey))
        init(apiKey);
    return async (c, next) => {
        let fid;
        const body = (await c.req.json().catch(() => { })) || {};
        if (env === "dev") {
            // In development, we use untrusted data
            const { untrustedData } = body !== null && body !== void 0 ? body : {};
            fid = untrustedData === null || untrustedData === void 0 ? void 0 : untrustedData.fid;
        }
        else {
            // In production, get fid from the validated message
            const { message } = await validateFramesMessage(body);
            const { data } = message !== null && message !== void 0 ? message : {};
            fid = data === null || data === void 0 ? void 0 : data.fid;
        }
        // Check if the user is allowed
        const { isAllowed } = await createAllowList(Object.assign({ fid }, parameters));
        // Add `isAllowed` to the context
        c.set("isAllowed", isAllowed);
        await next();
    };
}
//# sourceMappingURL=allowList.js.map