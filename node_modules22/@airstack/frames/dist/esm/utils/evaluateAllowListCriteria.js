import { convertCriteriaToQuery } from "./convertCriteriaToQuery";
import { AllowListCriteriaEnum as AllowListCriteria } from "../types";
export const evaluateAllowListCriteria = async (fid, criteria, messageCtx) => {
    var _a, _b, _c;
    const criteriaKeys = Object.keys(criteria);
    const { castFid } = messageCtx !== null && messageCtx !== void 0 ? messageCtx : {};
    if (criteriaKeys.length === 0 || criteriaKeys.length > 1) {
        throw new Error("Invalid criteria");
    }
    switch (criteriaKeys[0]) {
        case "or":
            return (await convertCriteriaToQuery(fid, (_a = criteria.or) === null || _a === void 0 ? void 0 : _a.map((c) => {
                if (Array.isArray(c)) {
                    if (c[0] === AllowListCriteria.FARCASTER_FOLLOWING_CASTER) {
                        return [c[0], { castFid }];
                    }
                    return c;
                }
                return c;
            }), { castFid })).reduce((acc, curr) => acc || curr, false);
        case "and":
            return (await convertCriteriaToQuery(fid, (_b = criteria.and) === null || _b === void 0 ? void 0 : _b.map((c) => {
                if (Array.isArray(c)) {
                    if (c[0] === AllowListCriteria.FARCASTER_FOLLOWING_CASTER) {
                        return [c[0], { castFid }];
                    }
                    return c;
                }
                return c;
            }), { castFid })).reduce((acc, curr) => acc && curr, true);
        case "nor":
            return !(await convertCriteriaToQuery(fid, (_c = criteria.nor) === null || _c === void 0 ? void 0 : _c.map((c) => {
                if (Array.isArray(c)) {
                    if (c[0] === AllowListCriteria.FARCASTER_FOLLOWING_CASTER) {
                        return [c[0], { castFid }];
                    }
                    return c;
                }
                return c;
            }), { castFid })).reduce((acc, curr) => acc || curr, false);
        default:
            return false;
    }
};
//# sourceMappingURL=evaluateAllowListCriteria.js.map