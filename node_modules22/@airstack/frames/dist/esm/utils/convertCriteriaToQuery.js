import { checkIsFollowedByFarcasterUser, checkIsFollowingFarcasterUser, checkNumberOfFarcasterFollowers, } from "../functions";
import { evaluateAllowListCriteria } from "./evaluateAllowListCriteria";
import { AllowListCriteriaEnum as AllowListCriteria } from "../types";
export const convertCriteriaToQuery = (fid, criteriaArray, messageCtx) => {
    try {
        const { castFid } = messageCtx !== null && messageCtx !== void 0 ? messageCtx : {};
        return Promise.all(criteriaArray.map((condition) => {
            if (Array.isArray(condition)) {
                const [key, value] = condition !== null && condition !== void 0 ? condition : [];
                switch (key) {
                    case AllowListCriteria.NUMBER_OF_FARCASTER_FOLLOWERS:
                        return checkNumberOfFarcasterFollowers({
                            fid,
                            followerCountCriteria: value,
                        });
                    case AllowListCriteria.FARCASTER_FOLLOWED_BY:
                        return (async () => {
                            var _a;
                            const { data } = await checkIsFollowedByFarcasterUser({
                                fid,
                                isFollowedBy: [value.fid],
                            });
                            return (_a = data === null || data === void 0 ? void 0 : data[0]) === null || _a === void 0 ? void 0 : _a.isFollowedBy;
                        })();
                    case AllowListCriteria.FARCASTER_FOLLOWING:
                        return (async () => {
                            var _a;
                            const { data } = await checkIsFollowingFarcasterUser({
                                fid,
                                isFollowing: [value.fid],
                            });
                            return (_a = data === null || data === void 0 ? void 0 : data[0]) === null || _a === void 0 ? void 0 : _a.isFollowing;
                        })();
                    case AllowListCriteria.FARCASTER_FOLLOWING_CASTER:
                        return castFid
                            ? (async () => {
                                var _a;
                                const { data } = await checkIsFollowingFarcasterUser({
                                    fid,
                                    isFollowing: [castFid],
                                });
                                return (_a = data === null || data === void 0 ? void 0 : data[0]) === null || _a === void 0 ? void 0 : _a.isFollowing;
                            })()
                            : false;
                    default:
                        return null;
                }
            }
            return evaluateAllowListCriteria(fid, condition, { castFid });
        }));
    }
    catch (error) {
        throw new Error(JSON.stringify(error));
    }
};
//# sourceMappingURL=convertCriteriaToQuery.js.map