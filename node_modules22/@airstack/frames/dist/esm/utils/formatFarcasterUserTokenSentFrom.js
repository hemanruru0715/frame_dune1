import { TokenType } from "../types";
export function formatFarcasterUserTokenSentFrom(data) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const { ethereum, base, zora, gold, degen, ham } = data !== null && data !== void 0 ? data : {};
    return [
        ...((_b = (_a = ethereum === null || ethereum === void 0 ? void 0 : ethereum.TokenTransfer) === null || _a === void 0 ? void 0 : _a.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                txHash,
                tokenType,
                receiver }, nftData);
        })) !== null && _b !== void 0 ? _b : []),
        ...((_d = (_c = base === null || base === void 0 ? void 0 : base.TokenTransfer) === null || _c === void 0 ? void 0 : _c.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                tokenType,
                txHash,
                receiver }, nftData);
        })) !== null && _d !== void 0 ? _d : []),
        ...((_f = (_e = zora === null || zora === void 0 ? void 0 : zora.TokenTransfer) === null || _e === void 0 ? void 0 : _e.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                tokenType,
                txHash,
                receiver }, nftData);
        })) !== null && _f !== void 0 ? _f : []),
        ...((_h = (_g = gold === null || gold === void 0 ? void 0 : gold.TokenTransfer) === null || _g === void 0 ? void 0 : _g.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                tokenType,
                txHash,
                receiver }, nftData);
        })) !== null && _h !== void 0 ? _h : []),
        ...((_k = (_j = degen === null || degen === void 0 ? void 0 : degen.TokenTransfer) === null || _j === void 0 ? void 0 : _j.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                tokenType,
                txHash,
                receiver }, nftData);
        })) !== null && _k !== void 0 ? _k : []),
        ...((_m = (_l = ham === null || ham === void 0 ? void 0 : ham.TokenTransfer) === null || _l === void 0 ? void 0 : _l.map(({ blockchain, tokenAddress, amount, amountInWei, token, blockTimestamp, blockNumber, txHash, receiver, tokenNft, tokenType, tokenId, }) => {
            let nftData = {};
            const { name, symbol } = token !== null && token !== void 0 ? token : {};
            const { contentValue, metaData } = tokenNft !== null && tokenNft !== void 0 ? tokenNft : {};
            const { image } = contentValue !== null && contentValue !== void 0 ? contentValue : {};
            if (tokenType !== TokenType.ERC20)
                nftData = Object.assign(Object.assign({}, nftData), { metaData, image, tokenId });
            return Object.assign({ blockchain,
                tokenAddress,
                amount,
                amountInWei,
                name,
                symbol,
                blockTimestamp,
                blockNumber,
                tokenType,
                txHash,
                receiver }, nftData);
        })) !== null && _m !== void 0 ? _m : []),
    ];
}
//# sourceMappingURL=formatFarcasterUserTokenSentFrom.js.map