import type { ReactNode } from 'react';
import type { Address, ContractFunctionParameters, TransactionReceipt } from 'viem';
/**
 * Note: exported as public Type
 */
export type TransactionButtonReact = {
    className?: string;
    disabled?: boolean;
    text?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionContextType = {
    address: Address;
    chainId?: number;
    contracts: ContractFunctionParameters[];
    errorMessage?: string;
    hasPaymaster?: boolean;
    isLoading: boolean;
    isToastVisible: boolean;
    onSubmit: () => void;
    receipt?: TransactionReceipt;
    setErrorMessage: (error: string) => void;
    setIsToastVisible: (isVisible: boolean) => void;
    setTransactionId: (id: string) => void;
    statusWriteContract?: string;
    statusWriteContracts?: string;
    transactionId?: string;
    transactionHash?: string;
};
/**
 * Paymaster service configuration
 */
type PaymasterService = {
    url: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionError = {
    code: string;
    error: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionProviderReact = {
    address: Address;
    capabilities?: WalletCapabilities;
    chainId?: number;
    children: ReactNode;
    contracts: ContractFunctionParameters[];
    onError?: (e: TransactionError) => void;
    onSuccess?: (response: TransactionResponse) => void;
};
/**
 * Note: exported as public Type
 */
export type TransactionReact = {
    address: Address;
    capabilities?: WalletCapabilities;
    chainId?: number;
    children: ReactNode;
    className?: string;
    contracts: ContractFunctionParameters[];
    onError?: (e: TransactionError) => void;
    onSuccess?: (response: TransactionResponse) => void;
};
/**
 * Note: exported as public Type
 */
export type TransactionResponse = {
    transactionHash: string;
    receipt: TransactionReceipt;
};
/**
 * Note: exported as public Type
 */
export type TransactionSponsorReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionStatusReact = {
    children: ReactNode;
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionStatusActionReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionStatusLabelReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionToastReact = {
    children: ReactNode;
    className?: string;
    durationMs?: number;
    position?: 'top-center' | 'top-right' | 'bottom-center' | 'bottom-right';
};
/**
 * Note: exported as public Type
 */
export type TransactionToastActionReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionToastIconReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type TransactionToastLabelReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 *
 * Wallet capabilities configuration
 */
export type WalletCapabilities = {
    paymasterService?: PaymasterService;
};
export {};
//# sourceMappingURL=types.d.ts.map