import { useWriteContract as useWriteContract$1 } from 'wagmi';
import { GENERIC_ERROR_MESSAGE, WRITE_CONTRACT_ERROR_CODE, UNCAUGHT_WRITE_CONTRACT_ERROR_CODE } from '../constants.js';

/**
 * Wagmi hook for single contract transactions.
 * Supports both EOAs and Smart Wallets.
 * Does not support transaction batching or paymasters.
 */
function useWriteContract({
  onError,
  setErrorMessage,
  setTransactionId
}) {
  try {
    const _useWriteContract$ = useWriteContract$1({
        mutation: {
          onError: e => {
            if (e?.cause?.name === 'UserRejectedRequestError') {
              setErrorMessage('Request denied.');
            } else {
              setErrorMessage(GENERIC_ERROR_MESSAGE);
            }
            onError?.({
              code: WRITE_CONTRACT_ERROR_CODE,
              error: e.message
            });
          },
          onSuccess: id => {
            setTransactionId(id);
          }
        }
      }),
      status = _useWriteContract$.status,
      writeContractAsync = _useWriteContract$.writeContractAsync,
      data = _useWriteContract$.data;
    return {
      status,
      writeContractAsync,
      data
    };
  } catch (err) {
    onError?.({
      code: UNCAUGHT_WRITE_CONTRACT_ERROR_CODE,
      error: JSON.stringify(err)
    });
    setErrorMessage(GENERIC_ERROR_MESSAGE);
    return {
      status: 'error',
      writeContractAsync: () => {}
    };
  }
}
export { useWriteContract };
//# sourceMappingURL=useWriteContract.js.map
