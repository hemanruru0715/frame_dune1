import type { TransactionError } from '../types';
type UseWriteContractParams = {
    onError?: (e: TransactionError) => void;
    setErrorMessage: (error: string) => void;
    setTransactionId: (id: string) => void;
};
/**
 * Wagmi hook for single contract transactions.
 * Supports both EOAs and Smart Wallets.
 * Does not support transaction batching or paymasters.
 */
export declare function useWriteContract({ onError, setErrorMessage, setTransactionId, }: UseWriteContractParams): {
    status: "pending" | "error" | "success" | "idle";
    writeContractAsync: import("wagmi/query").WriteContractMutateAsync<import("wagmi").Config, unknown>;
    data: `0x${string}` | undefined;
} | {
    status: string;
    writeContractAsync: () => void;
    data?: undefined;
};
export {};
//# sourceMappingURL=useWriteContract.d.ts.map