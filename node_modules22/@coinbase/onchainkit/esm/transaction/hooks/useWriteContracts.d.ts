import type { TransactionError } from '../types';
type UseWriteContractsParams = {
    onError?: (e: TransactionError) => void;
    setErrorMessage: (error: string) => void;
    setTransactionId: (id: string) => void;
};
/**
 * useWriteContracts: Experimental Wagmi hook for batching transactions.
 * Supports Smart Wallets.
 * Supports batch operations and capabilities such as paymasters.
 * Does not support EOAs.
 */
export declare function useWriteContracts({ onError, setErrorMessage, setTransactionId, }: UseWriteContractsParams): {
    status: "pending" | "error" | "success" | "idle";
    writeContractsAsync: import("@wagmi/core/experimental").WriteContractsMutateAsync<readonly import("viem").ContractFunctionParameters[], import("wagmi").Config, unknown>;
    writeContracts?: undefined;
} | {
    status: string;
    writeContracts: () => void;
    writeContractsAsync: () => Promise<{}>;
};
export {};
//# sourceMappingURL=useWriteContracts.d.ts.map