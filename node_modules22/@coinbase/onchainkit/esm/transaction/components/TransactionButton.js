import { useMemo } from 'react';
import { Spinner } from '../../internal/components/Spinner.js';
import { checkmarkSvg } from '../../internal/svg/checkmarkSvg.js';
import { cn, background, pressable, text } from '../../styles/theme.js';
import { isSpinnerDisplayed } from '../utils.js';
import { useTransactionContext } from './TransactionProvider.js';
import { jsx } from 'react/jsx-runtime';
function TransactionButton({
  className,
  disabled = false,
  text: buttonText = 'Transact'
}) {
  const _useTransactionContex = useTransactionContext(),
    address = _useTransactionContex.address,
    contracts = _useTransactionContex.contracts,
    errorMessage = _useTransactionContex.errorMessage,
    isLoading = _useTransactionContex.isLoading,
    onSubmit = _useTransactionContex.onSubmit,
    receipt = _useTransactionContex.receipt,
    statusWriteContract = _useTransactionContex.statusWriteContract,
    statusWriteContracts = _useTransactionContex.statusWriteContracts,
    transactionHash = _useTransactionContex.transactionHash,
    transactionId = _useTransactionContex.transactionId;
  const isInProgress = statusWriteContract === 'pending' || statusWriteContracts === 'pending' || isLoading;
  const isMissingProps = !contracts || !address;
  const isWaitingForReceipt = !!transactionId || !!transactionHash;
  const isDisabled = !receipt && (isInProgress || isMissingProps || isWaitingForReceipt || disabled);
  const displaySpinner = isSpinnerDisplayed({
    errorMessage,
    hasReceipt: !!receipt,
    isLoading,
    statusWriteContract,
    statusWriteContracts,
    transactionHash,
    transactionId
  });
  const buttonContent = useMemo(() => {
    if (receipt) {
      return checkmarkSvg;
    }
    if (errorMessage) {
      return 'Try again';
    }
    return buttonText;
  }, [buttonText, errorMessage, receipt]);
  return /*#__PURE__*/jsx("button", {
    className: cn(background.primary, 'w-full rounded-xl', 'mt-4 px-4 py-3 font-medium text-base text-white leading-6', isDisabled && pressable.disabled, text.headline, className),
    onClick: onSubmit,
    type: "button",
    disabled: isDisabled,
    children: displaySpinner ? /*#__PURE__*/jsx(Spinner, {}) : /*#__PURE__*/jsx("span", {
      className: cn(text.headline, 'flex justify-center text-inverse'),
      children: buttonContent
    })
  });
}
export { TransactionButton };
//# sourceMappingURL=TransactionButton.js.map
