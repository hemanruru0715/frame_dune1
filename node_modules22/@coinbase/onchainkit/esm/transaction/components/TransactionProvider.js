function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { useAccount, useSwitchChain, useWaitForTransactionReceipt } from 'wagmi';
import { useValue } from '../../internal/hooks/useValue.js';
import { GENERIC_ERROR_MESSAGE, METHOD_NOT_SUPPORTED_ERROR_SUBSTRING } from '../constants.js';
import { useCallsStatus } from '../hooks/useCallsStatus.js';
import { useWriteContract } from '../hooks/useWriteContract.js';
import { useWriteContracts } from '../hooks/useWriteContracts.js';
import { jsx } from 'react/jsx-runtime';
const emptyContext = {};
const TransactionContext = /*#__PURE__*/createContext(emptyContext);
function useTransactionContext() {
  const context = useContext(TransactionContext);
  if (context === emptyContext) {
    throw new Error('useTransactionContext must be used within a Transaction component');
  }
  return context;
}
function TransactionProvider({
  address,
  capabilities,
  chainId,
  children,
  contracts,
  onError,
  onSuccess
}) {
  const _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    errorMessage = _useState2[0],
    setErrorMessage = _useState2[1];
  const _useState3 = useState(''),
    _useState4 = _slicedToArray(_useState3, 2),
    transactionId = _useState4[0],
    setTransactionId = _useState4[1];
  const _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isToastVisible = _useState6[0],
    setIsToastVisible = _useState6[1];
  const account = useAccount();
  const _useSwitchChain = useSwitchChain(),
    switchChainAsync = _useSwitchChain.switchChainAsync;
  const _useWriteContracts = useWriteContracts({
      onError,
      setErrorMessage,
      setTransactionId
    }),
    statusWriteContracts = _useWriteContracts.status,
    writeContractsAsync = _useWriteContracts.writeContractsAsync;
  const _useWriteContract = useWriteContract({
      onError,
      setErrorMessage,
      setTransactionId
    }),
    statusWriteContract = _useWriteContract.status,
    writeContractAsync = _useWriteContract.writeContractAsync,
    writeContractTransactionHash = _useWriteContract.data;
  const _useCallsStatus = useCallsStatus({
      onError,
      transactionId
    }),
    transactionHash = _useCallsStatus.transactionHash,
    callStatus = _useCallsStatus.status;
  const _useWaitForTransactio = useWaitForTransactionReceipt({
      hash: writeContractTransactionHash || transactionHash
    }),
    receipt = _useWaitForTransactio.data;
  const fallbackToWriteContract = useCallback(async () => {
    // EOAs don't support batching, so we process contracts individually.
    // This gracefully handles accidental batching attempts with EOAs.
    for (const contract of contracts) {
      try {
        await writeContractAsync?.(contract);
      } catch (err) {
        // if user rejected request
        if (err?.cause?.name === 'UserRejectedRequestError') {
          setErrorMessage('Request denied.');
        } else {
          setErrorMessage(GENERIC_ERROR_MESSAGE);
        }
      }
    }
  }, [contracts, writeContractAsync]);
  const switchChain = useCallback(async targetChainId => {
    if (targetChainId && account.chainId !== targetChainId) {
      await switchChainAsync({
        chainId: targetChainId
      });
    }
  }, [account.chainId, switchChainAsync]);
  const executeContracts = useCallback(async () => {
    await writeContractsAsync({
      contracts,
      capabilities
    });
  }, [writeContractsAsync, contracts, capabilities]);
  const handleSubmitErrors = useCallback(async err => {
    // handles EOA writeContracts error
    // (fallback to writeContract)
    if (err instanceof Error && err.message.includes(METHOD_NOT_SUPPORTED_ERROR_SUBSTRING)) {
      try {
        await fallbackToWriteContract();
      } catch (_err) {
        setErrorMessage(GENERIC_ERROR_MESSAGE);
      }
      // handles user rejected request error
    } else if (err?.cause?.name === 'UserRejectedRequestError') {
      setErrorMessage('Request denied.');
      // handles generic error
    } else {
      setErrorMessage(GENERIC_ERROR_MESSAGE);
    }
  }, [fallbackToWriteContract]);
  const handleSubmit = useCallback(async () => {
    setErrorMessage('');
    setIsToastVisible(true);
    try {
      await switchChain(chainId);
      await executeContracts();
    } catch (err) {
      await handleSubmitErrors(err);
    }
  }, [chainId, executeContracts, handleSubmitErrors, switchChain]);
  useEffect(() => {
    const txnHash = transactionHash || writeContractTransactionHash;
    if (txnHash && receipt) {
      onSuccess?.({
        transactionHash: txnHash,
        receipt
      });
    }
  }, [onSuccess, receipt, transactionHash, writeContractTransactionHash]);
  const value = useValue({
    address,
    chainId,
    contracts,
    errorMessage,
    hasPaymaster: !!capabilities?.paymasterService?.url,
    isLoading: callStatus === 'PENDING',
    isToastVisible,
    onSubmit: handleSubmit,
    receipt,
    setErrorMessage,
    setIsToastVisible,
    setTransactionId,
    statusWriteContracts,
    statusWriteContract,
    transactionId,
    transactionHash: transactionHash || writeContractTransactionHash
  });
  return /*#__PURE__*/jsx(TransactionContext.Provider, {
    value: value,
    children: children
  });
}
export { TransactionContext, TransactionProvider, useTransactionContext };
//# sourceMappingURL=TransactionProvider.js.map
