import type { UserOperation } from 'permissionless';
import type { Dispatch, ReactNode, SetStateAction } from 'react';
import type { Address, Chain, PublicClient } from 'viem';
import type { UseBalanceReturnType, UseReadContractReturnType } from 'wagmi';
import type { SwapError } from '../swap';
export type ConnectButtonReact = {
    className?: string;
    connectButtonOnClick: () => void;
    text: string;
};
/**
 * Note: exported as public Type
 */
export type ConnectWalletReact = {
    children?: React.ReactNode;
    className?: string;
    text?: string;
    withWalletAggregator?: boolean;
};
/**
 * Note: exported as public Type
 */
export type IsValidAAEntrypointOptions = {
    entrypoint: string;
};
/**
 * Note: exported as public Type
 */
export type IsWalletACoinbaseSmartWalletOptions = {
    client: PublicClient;
    userOp: UserOperation<'v0.6'>;
};
/**
 * Note: exported as public Type
 */
export type IsWalletACoinbaseSmartWalletResponse = {
    isCoinbaseSmartWallet: true;
} | {
    isCoinbaseSmartWallet: false;
    error: string;
    code: string;
};
export type UseGetETHBalanceResponse = {
    error?: SwapError;
    response?: UseBalanceReturnType;
    convertedBalance?: string;
    roundedBalance?: string;
};
export type UseGetTokenBalanceResponse = {
    error?: SwapError;
    response?: UseReadContractReturnType;
    convertedBalance?: string;
    roundedBalance?: string;
};
/**
 * Note: exported as public Type
 */
export type WalletContextType = {
    address?: Address | null;
    chain?: Chain;
    isOpen: boolean;
    setIsOpen: Dispatch<SetStateAction<boolean>>;
};
/**
 * Note: exported as public Type
 */
export type WalletReact = {
    children: React.ReactNode;
};
/**
 * Note: exported as public Type
 */
export type WalletDropdownBaseNameReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type WalletDropdownReact = {
    children: React.ReactNode;
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type WalletDropdownDisconnectReact = {
    className?: string;
    text?: string;
};
/**
 * Note: exported as public Type
 */
export type WalletDropdownLinkReact = {
    children: string;
    className?: string;
    href: string;
    icon?: 'wallet' & ReactNode;
    rel?: string;
    target?: string;
};
//# sourceMappingURL=types.d.ts.map