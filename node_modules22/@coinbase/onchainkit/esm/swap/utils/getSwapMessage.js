import { getSwapError } from './getSwapError.js';
let SwapMessage = /*#__PURE__*/function (SwapMessage) {
  SwapMessage["BALANCE_ERROR"] = "Error fetching token balance";
  SwapMessage["CONFIRM_IN_WALLET"] = "Confirm in wallet";
  SwapMessage["FETCHING_QUOTE"] = "Fetching quote...";
  SwapMessage["FETCHING_BALANCE"] = "Fetching balance...";
  SwapMessage["INCOMPLETE_FIELD"] = "Complete the fields to continue";
  SwapMessage["INSUFFICIENT_BALANCE"] = "Insufficient balance";
  SwapMessage["LOW_LIQUIDITY"] = "Liquidity too low for the token";
  SwapMessage["SWAP_IN_PROGRESS"] = "Swap in progress...";
  SwapMessage["TOO_MANY_REQUESTS"] = "Too many requests. Please try again later.";
  SwapMessage["USER_REJECTED"] = "User rejected the transaction";
  return SwapMessage;
}({});
function getSwapMessage({
  error,
  from,
  loading,
  isTransactionPending,
  to
}) {
  // handle balance error
  if (from.error || to.error) {
    return SwapMessage.BALANCE_ERROR;
  }
  // handle amount exceeds balance
  if (Number(from.balance) < Number(from.amount)) {
    return SwapMessage.INSUFFICIENT_BALANCE;
  }
  // handle pending transaction
  if (isTransactionPending) {
    return SwapMessage.CONFIRM_IN_WALLET;
  }
  // handle loading states
  if (loading) {
    return SwapMessage.SWAP_IN_PROGRESS;
  }
  if (to.loading || from.loading) {
    return SwapMessage.FETCHING_QUOTE;
  }
  // missing required fields
  if (!from.amount || !from.token || !to.amount || !to.token) {
    return SwapMessage.INCOMPLETE_FIELD;
  }
  if (!error) {
    return '';
  }
  // handle specific error codes
  return getSwapError(error);
}
export { SwapMessage, getSwapMessage };
//# sourceMappingURL=getSwapMessage.js.map
