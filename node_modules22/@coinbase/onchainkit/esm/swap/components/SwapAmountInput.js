import { useMemo, useEffect, useCallback } from 'react';
import { TextInput } from '../../internal/components/TextInput.js';
import { getRoundedAmount } from '../../internal/utils/getRoundedAmount.js';
import { isValidAmount } from '../../internal/utils/isValidAmount.js';
import { cn, background, text, color, pressable } from '../../styles/theme.js';
import '../../token/index.js';
import { useSwapContext } from './SwapProvider.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { TokenSelectDropdown } from '../../token/components/TokenSelectDropdown.js';
import { TokenChip } from '../../token/components/TokenChip.js';
function useValue(object) {
  return useMemo(() => object, [object]);
}

// istanbul ignore next
function SwapAmountInput({
  className,
  delayMs = 1000,
  label,
  token,
  type,
  swappableTokens
}) {
  const _useSwapContext = useSwapContext(),
    to = _useSwapContext.to,
    from = _useSwapContext.from,
    handleAmountChange = _useSwapContext.handleAmountChange;
  const source = useValue(type === 'from' ? from : to);
  const destination = useValue(type === 'from' ? to : from);
  useEffect(() => {
    if (token) {
      source.setToken(token);
    }
  }, [token, source.setToken]);
  const handleMaxButtonClick = useCallback(() => {
    if (!source.balance) {
      return;
    }
    source.setAmount(source.balance);
    handleAmountChange(type, source.balance);
  }, [source.balance, source.setAmount, handleAmountChange, type]);
  const handleChange = useCallback(amount => {
    handleAmountChange(type, amount);
  }, [handleAmountChange, type]);
  const handleSetToken = useCallback(token => {
    source.setToken(token);
    handleAmountChange(type, source.amount, token);
  }, [source.amount, source.setToken, handleAmountChange, type]);

  // we are mocking the token selectors so i'm not able
  // to test this since the components aren't actually rendering
  /* istanbul ignore next */
  const sourceTokenOptions = useMemo(() => {
    return swappableTokens?.filter(({
      symbol
    }) => symbol !== destination.token?.symbol) ?? [];
  }, [swappableTokens, destination.token]);
  const hasInsufficientBalance = type === 'from' && Number(source.balance) < Number(source.amount);
  return /*#__PURE__*/jsxs("div", {
    className: cn(background.alternate, 'box-border flex w-full flex-col items-start', 'rounded-md border-b border-solid p-4', className),
    "data-testid": "ockSwapAmountInput_Container",
    children: [/*#__PURE__*/jsx("div", {
      className: "flex w-full items-center justify-between",
      children: /*#__PURE__*/jsx("span", {
        className: cn(text.label2, 'text-foreground-muted'),
        children: label
      })
    }), /*#__PURE__*/jsxs("div", {
      className: "flex w-full items-center justify-between",
      children: [/*#__PURE__*/jsx(TextInput, {
        className: cn('w-full border-[none] bg-transparent font-display text-[2.5rem]', 'leading-none outline-none', hasInsufficientBalance ? color.error : color.foreground),
        placeholder: "0.0",
        delayMs: delayMs,
        value: source.amount,
        setValue: source.setAmount,
        disabled: source.loading,
        onChange: handleChange,
        inputValidator: isValidAmount
      }), sourceTokenOptions.length > 0 ? /*#__PURE__*/jsx(TokenSelectDropdown, {
        token: source.token,
        setToken: handleSetToken,
        options: sourceTokenOptions
      }) : source.token && /*#__PURE__*/jsx(TokenChip, {
        className: pressable.inverse,
        token: source.token
      })]
    }), /*#__PURE__*/jsxs("div", {
      className: "mt-4 flex w-full justify-between",
      children: [/*#__PURE__*/jsx("span", {
        className: cn(text.label2, 'text-foregroune-muted'),
        children: ''
      }), /*#__PURE__*/jsxs("div", {
        className: "flex items-center",
        children: [source.balance && /*#__PURE__*/jsx("span", {
          className: cn(text.label2, 'text-foreground-muted'),
          children: `Balance: ${getRoundedAmount(source.balance, 8)}`
        }), type === 'from' && /*#__PURE__*/jsx("button", {
          type: "button",
          className: "flex cursor-pointer items-center justify-center px-2 py-1",
          "data-testid": "ockSwapAmountInput_MaxButton",
          onClick: handleMaxButtonClick,
          children: /*#__PURE__*/jsx("span", {
            className: cn(text.label1, color.primary),
            children: "Max"
          })
        })]
      })]
    })]
  });
}
export { SwapAmountInput };
//# sourceMappingURL=SwapAmountInput.js.map
