import type { Dispatch, ReactNode, SetStateAction } from 'react';
import type { Address, Hex, TransactionReceipt } from 'viem';
import type { Token } from '../token/types';
export type AddressOrETH = Address | 'ETH';
/**
 * Note: exported as public Type
 */
export type BuildSwapTransaction = {
    approveTransaction?: Transaction;
    fee: Fee;
    quote: SwapQuote;
    transaction: Transaction;
    warning?: QuoteWarning;
};
/**
 * Note: exported as public Type
 */
export type BuildSwapTransactionResponse = BuildSwapTransaction | SwapError;
/**
 * Note: exported as public Type
 */
export type BuildSwapTransactionParams = GetSwapQuoteParams & {
    fromAddress: Address;
};
/**
 * Note: exported as public Type
 */
export type Fee = {
    amount: string;
    baseAsset: Token;
    percentage: string;
};
export type GetAPIParamsForToken = GetSwapQuoteParams | BuildSwapTransactionParams;
export type GetQuoteAPIParams = {
    amount: string;
    amountReference?: string;
    from: AddressOrETH | '';
    to: AddressOrETH | '';
    v2Enabled?: boolean;
    slippagePercentage?: string;
};
export type GetSwapAPIParams = GetQuoteAPIParams & {
    fromAddress: Address;
};
/**
 * Note: exported as public Type
 */
export type GetSwapQuoteParams = {
    amount: string;
    amountReference?: string;
    from: Token;
    isAmountInDecimals?: boolean;
    maxSlippage?: string;
    to: Token;
    useAggregator: boolean;
};
/**
 * Note: exported as public Type
 */
export type GetSwapQuoteResponse = SwapQuote | SwapError;
export type GetSwapMessageParams = {
    error?: SwapErrorState;
    loading?: boolean;
    isTransactionPending?: boolean;
    to: SwapUnit;
    from: SwapUnit;
};
/**
 * Note: exported as public Type
 */
export type QuoteWarning = {
    description?: string;
    message?: string;
    type?: string;
};
export type RawTransactionData = {
    data: string;
    from: string;
    gas: string;
    gasPrice: string;
    to: string;
    value: string;
};
/**
 * Note: exported as public Type
 */
export type SwapAmountInputReact = {
    className?: string;
    delayMs?: number;
    label: string;
    swappableTokens?: Token[];
    token?: Token;
    type: 'to' | 'from';
};
export type SwapAPIParams = GetQuoteAPIParams | GetSwapAPIParams;
export type SwapAPIResponse = {
    approveTx?: RawTransactionData;
    chainId: string;
    fee: Fee;
    quote: SwapQuote;
    tx: RawTransactionData;
};
/**
 * Note: exported as public Type
 */
export type SwapButtonReact = {
    className?: string;
    disabled?: boolean;
    onError?: (error: SwapError) => void;
    onStart?: (txHash: string) => void | Promise<void>;
    onSuccess?: (txReceipt: TransactionReceipt) => void | Promise<void>;
};
export type SwapContextType = {
    error?: SwapErrorState;
    from: SwapUnit;
    to: SwapUnit;
    loading: boolean;
    isTransactionPending: boolean;
    handleSubmit: (onError?: (error: SwapError) => void, onStart?: (txHash: string) => void | Promise<void>, onSuccess?: (txReceipt: TransactionReceipt) => void | Promise<void>) => void;
    handleToggle: () => void;
    handleAmountChange: (t: 'from' | 'to', amount: string, st?: Token, dt?: Token) => void;
};
/**
 * Note: exported as public Type
 */
export type SwapError = {
    code: string;
    error: string;
};
export type SwapErrorState = {
    quoteError?: SwapError;
    swapError?: SwapError;
};
export type SwapLoadingState = {
    isSwapLoading: boolean;
};
/**
 * Note: exported as public Type
 */
export type SwapMessageReact = {
    className?: string;
};
/**
 * Note: exported as public Type
 */
export type SwapQuote = {
    amountReference: string;
    from: Token;
    fromAmount: string;
    hasHighPriceImpact: boolean;
    priceImpact: string;
    slippage: string;
    to: Token;
    toAmount: string;
    warning?: QuoteWarning;
};
export type SwapParams = {
    amount: string;
    fromAddress: Address;
    from: Token;
    to: Token;
};
/**
 * Note: exported as public Type
 */
export type SwapReact = {
    address: Address;
    children: ReactNode;
    className?: string;
    experimental?: {
        useAggregator: boolean;
        maxSlippage?: number;
    };
    title?: string;
};
/**
 * Note: exported as public Type
 */
export type SwapToggleButtonReact = {
    className?: string;
};
export type SwapUnit = {
    amount: string;
    balance?: string;
    error?: SwapError;
    loading: boolean;
    setAmount: Dispatch<SetStateAction<string>>;
    setLoading: Dispatch<SetStateAction<boolean>>;
    setToken: Dispatch<SetStateAction<Token | undefined>>;
    token: Token | undefined;
};
/**
 * Note: exported as public Type
 */
export type Transaction = {
    chainId: number;
    data: Hex;
    gas: bigint;
    maxFeePerGas?: bigint | undefined;
    maxPriorityFeePerGas?: bigint | undefined;
    nonce?: number;
    to: Address;
    value: bigint;
};
//# sourceMappingURL=types.d.ts.map